--제약조건 - 컬럼에 원치않는 데이터가 입력, 삭제, 수정 되는 것을 방지하기 위한 조건
--PRIMARY KEY - 테이블의 고유키, 중복X, NULL X , PK는 테이블의 1개
--UNIQUE - 중복 X , NULL O
--NOT NULL - NULL을 허용하지 않음
--FOREIGN KEY -참조하는 테이블의 PK를 넣어놓은 컬럼, 중복 O, NULL O
--CHECK - 컬럼에 대한 데이터 제한(WHERE절과 유사)

--제약조걵을 확인하는 명령문 OR 마우스로 확인
SELECT * FROM user_constraints;

select * from employees;
--1st (열레벨)
DROP TABLE DEPTS;
CREATE TABLE DEPTS(
    DEPT_NO NUMBER(2)       CONSTRAINT DEPTS_DEPT_NO_PK PRIMARY KEY,
    DEPT_NAME VARCHAR2(30)  CONSTRAINT DEPTS_DEPT_NAME_NN NOT NULL,
    DEPT_DATE DATE          DEFAULT SYSDATE , --값이 들어가지 않을때 자동으로 지정되는 기본값
    DEPT_PHONE VARCHAR2(30) CONSTRAINT DEPTS_DEPT_PHONE_UK UNIQUE,
    DEPT_GENDER CHAR(1)     CONSTRAINT DEPTS_DEPT_GENDER_CK CHECK(DEPT_GENDER IN ('F','M')), --WHERE절의 조건을 쓰면 된다
    LOCA_ID NUMBER(4)       CONSTRAINT DEPTS_DEPT_LOCA_ID_FK REFERENCES LOCATIONS(LOCATION_ID)
);
    
DESC LOCATIONS;
    
--(CONSTRAINTS는 생략가능)
DROP TABLE DEPTS;
CREATE TABLE DEPTS(
    DEPT_NO NUMBER(2)       PRIMARY KEY,
    DEPT_NAME VARCHAR2(30)  NOT NULL,
    DEPT_DATE DATE          DEFAULT SYSDATE , --값이 들어가지 않을때 자동으로 지정되는 기본값
    DEPT_PHONE VARCHAR2(30) UNIQUE,
    DEPT_GENDER CHAR(1)     CHECK(DEPT_GENDER IN ('F','M')), --WHERE절의 조건을 쓰면 된다
    LOCA_ID NUMBER(4)       REFERENCES LOCATIONS(LOCATION_ID)
);
DESC DEPTS;
INSERT INTO DEPTS(DEPT_NO,DEPT_NAME,DEPT_PHONE,DEPT_GENDER,LOCA_ID)
VALUES(1, NULL, '010...','F',1700); --NOT NULL제약 위배
INSERT INTO DEPTS(DEPT_NO,DEPT_NAME,DEPT_PHONE,DEPT_GENDER,LOCA_ID)
VALUES(1, 'HONG', '010...','X',1700); --CHECK 제약 위배
INSERT INTO DEPTS(DEPT_NO,DEPT_NAME,DEPT_PHONE,DEPT_GENDER,LOCA_ID)
VALUES(1, 'HONG', '010...','F',100); --FK제약 위배
INSERT INTO DEPTS(DEPT_NO,DEPT_NAME,DEPT_PHONE,DEPT_GENDER,LOCA_ID)
VALUES(1, 'HONG', '010...','F',1700); 
INSERT INTO DEPTS(DEPT_NO,DEPT_NAME,DEPT_PHONE,DEPT_GENDER,LOCA_ID)
VALUES(2, 'HONG', '010...','F',1700); --UNIQUE 제약 위배
--개체 무결성 : 기본키에 NULL일 수 없고, 중복될 수 없다 규칙
--참조 무결성 : 참조하는 테이블의 PK만 FK컬럼에 들어 갈 수 있다 규칙
--도메인 무결성 : CHECK, UNIQUE제약을 위배 할 수 없다 규칙

--테이블 레벨 제약조건
CREATE TABLE DEPTS (
    DEPT_NO NUMBER(2),
    DEPT_NAME VARCHAR2(30) NOT NULL,
    DEPT_DATE DATE         DEFAULT SYSDATE,
    DEPT_PHONE VARCHAR2(30),
    DEPT_GENDER CHAR(1),
    LOCA_ID NUMBER(4),
    CONSTRAINT DEPTS_DEPT_NO_PN PRIMARY KEY(DEPT_NO /*,DEPT_NAME */), --컬럼명이 들어감 슈퍼키 지정은 테이블레벨로 가능함
    CONSTRAINT DEPTS_PHONE_UK UNIQUE (DEPT_PHONE), 
    CONSTRAINT DEPTS_GENDER_CK CHECK (DEPT_GENDER IN ('F','M')),
    CONSTRAINT DEPTS_LOCA_ID_FK FOREIGN KEY (LOCA_ID) REFERENCES LOCATIONS(LOCATION_ID)
);

--3ND (제약조건의 추가 삭제), 수정은 없음
CREATE TABLE DEPTS (
    DEPT_NO NUMBER(2),
    DEPT_NAME VARCHAR2(30) ,
    DEPT_DATE DATE         DEFAULT SYSDATE,
    DEPT_PHONE VARCHAR2(30),
    DEPT_GENDER CHAR(1),
    LOCA_ID NUMBER(4)
   
);
ALTER TABLE DEPTS ADD CONSTRAINT DEPT_NO_PK PRIMARY KEY (DEPT_NO); --PK추가
--NOT NULL은 MODIFY구문으로 열 변경으로 추가함
ALTER TABLE DEPTS MODIFY DEPT_NAME VARCHAR2(30) NOT NULL;
ALTER TABLE DEPTS ADD CONSTRAINT DEPT_PHONE_UK UNIQUE (DEPT_PHONE); --UK추가
ALTER TABLE DEPTS ADD CONSTRAINT DEPT_GENDER_CK CHECK (DEPT_GENDER IN('F','M')); --CK추가
ALTER TABLE DEPTS ADD CONSTRAINT DEPTS_LOCA_ID_FK FOREIGN KEY (LOCA_ID) REFERENCES LOCATIONS(LOCATION_ID);

--제약조건의 삭제
ALTER TABLE DEPTS DROP PRIMARY KEY;  --이렇게 지울 수 있음
ALTER TABLE DEPTS DROP CONSTRAINT DEPTS_LOCA_ID_FK;  --이름으로도 지울수 있음
--테이브의 제약조건을 SQL문으로 확인
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'DEPTS';


---------------------------------------------------------
--연습문제
--문제1.
--다음과 같은 테이블을 생성하고 데이터를 insert해보세요.
--테이블 제약조건은 아래와 같습니다. 
--조건) M_NAME 는 가변문자형 20byte, 널값을 허용하지 않음
--조건) M_NUM 은 숫자형 5자리, PRIMARY KEY 이름(mem_memnum_pk) 
--조건) REG_DATE 는 날짜형, 널값을 허용하지 않음, UNIQUE KEY 이름:(mem_regdate_uk)
--조건) SALARY 숫자형 10자리, CHECK제약 (0 보다 크다)
--조건) LOCA 숫자형 4자리, FOREIGN KEY – 참조 locations테이블(location_id) 이름:(mem_loca_loc_locid_fk)
DROP TABLE INFO;
CREATE TABLE INFO(
    M_NAME VARCHAR2(20) NOT NULL,
    M_NUM NUMBER(5) CONSTRAINT INFO_MEM_MEMNUM_PK PRIMARY KEY,
    REG_DATE DATE NOT NULL,
    SALARY NUMBER(10) CHECK(SALARY > 0),
    LOCA NUMBER(4),
    CONSTRAINT INFO_MEN_REGDATE_UK UNIQUE (REG_DATE ),
    CONSTRAINT INFO_MEM_LOCA_LOC_LOCID_FK FOREIGN KEY (LOCA) REFERENCES LOCATIONS(LOCATION_ID)
);

INSERT INTO INFO(M_NAME,M_NUM,REG_DATE,SALARY,LOCA) 
VALUES('AAA',1,'2018-07-01',5000,1800);
INSERT INTO INFO(M_NAME,M_NUM,REG_DATE,SALARY,LOCA) 
VALUES('BBB',2,'2018-07-02',3000,1900);
INSERT INTO INFO(M_NAME,M_NUM,REG_DATE,SALARY,LOCA) 
VALUES('CCC',3,'2018-07-03',3000,2000);
INSERT INTO INFO(M_NAME,M_NUM,REG_DATE,SALARY,LOCA) 
VALUES('DDD',4,SYSDATE,2000,2000);

SELECT * FROM INFO;

--문제2.
--도서테이블, 도서 대여 이력 테이블을 생성하려 합니다.
--도서 테이블은
--도서번호(문자) PK, 도서명(문자), 출판사(문자), 입고일(날짜)
DROP TABLE BOOKS;
CREATE TABLE BOOKS (
    BOOK_ID VARCHAR2(30) PRIMARY KEY,
    BOOK_NAME VARCHAR2(30),
    PUBLISHER VARCHAR2(30),
    BOOK_DATE DATE
    );

--도서 대여 이력 테이블은
--대여번호(숫자) PK, 도서번호(문자) FK, 대여일(날짜), 반납일(날짜), 반납여부(Y/N)
--를 가집니다.
--적절한 테이블을 생성해 보세요.

CREATE TABLE RENTAL_HISTORY (
    RANTAL_ID NUMBER(10) PRIMARY KEY,
    BOOK_ID VARCHAR2(30),
    RANTAL_DATE DATE NOT NULL,
    RETURN_DATE DATE,
    RETURN_STATUS CHAR(1) CHECK (RETURN_STATUS IN ('Y', 'N')),
    CONSTRAINT fk_book FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID)
    );
    